"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram-–±–æ—Ç–∞
"""
import logging
from typing import Dict, Any, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, CallbackQueryHandler, MessageHandler, filters

from ai_tutor.bot.conversation import get_conversation, save_conversation
from ai_tutor.bot.keyboards import (
    get_chapters_keyboard, get_task_types_keyboard, 
    get_difficulty_keyboard, get_feedback_keyboard
)
from ai_tutor.config.settings import TELEGRAM_TOKEN, CHAPTERS, TASK_TYPES, DIFFICULTY_LEVELS
from ai_tutor.config.constants import MESSAGES
from ai_tutor.database.models import Student, Task
from ai_tutor.database.neo4j_client import Neo4jClient
from ai_tutor.api.openrouter import OpenRouterClient

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECTING_CHAPTER, SELECTING_TASK_TYPE, SELECTING_DIFFICULTY, WAITING_FOR_ANSWER, SHOW_FEEDBACK = range(5)

# –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è callback-–¥–∞–Ω–Ω—ã—Ö
PREFIX_CHAPTER = "chapter:"
PREFIX_TASK_TYPE = "task_type:"
PREFIX_DIFFICULTY = "difficulty:"

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
neo4j_client = Neo4jClient()
openrouter_client = OpenRouterClient()


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    user = update.effective_user
    telegram_id = user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
    conversation = get_conversation(telegram_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    student = Student(
        telegram_id=telegram_id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        neo4j_client.save_student(student)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
        await update.message.reply_text(
            f"–ò–ò-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –®–∫–æ–ª—ã –°–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ (–®–°–ú). –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –¥–≤–∞ –≤–∏–¥–∞ –∑–∞–¥–∞—á: \n"
            f"1) –° –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤\n"
            f"2) –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ (—Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É –º—ã—à–ª–µ–Ω–∏—è –ø–∏—Å—å–º–æ–º)\n\n"
            f"–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ - –ø–æ–≤—ã—Å–∏—Ç—å –±–µ–≥–ª–æ—Å—Ç—å –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–æ–Ω—è—Ç–∏–π.\n" 
            f"–ü—Ä–æ–µ–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞–º–∏ –®–°–ú.",
            parse_mode="Markdown"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [
                InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="task"),
                InlineKeyboardButton("–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–∞—á–∞", callback_data="random_task")
            ],
            [
                InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –≥–ª–∞–≤—É", callback_data="change_chapter"),
                InlineKeyboardButton("–í–æ–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É", callback_data="consultant")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        
        return ConversationHandler.END
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        await update.message.reply_text(
            MESSAGES['error']
        )
        return ConversationHandler.END


async def consultant_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /consultant
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    user = update.effective_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    if 'user_data' not in context:
        context.user_data = {}
        
    context.user_data['consultation_mode'] = True
    
    await update.message.reply_text(
        f"üë®‚Äçüè´ *–†–µ–∂–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω*\n\n"
        f"{user.first_name}, —è –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫—É—Ä—Å—É —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è. "
        f"–í—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ –ª—é–±—ã—Ö –ø–æ–Ω—è—Ç–∏—è—Ö, –≥–ª–∞–≤–∞—Ö –∫—É—Ä—Å–∞ –∏–ª–∏ —Å–≤—è–∑—è—Ö –º–µ–∂–¥—É –Ω–∏–º–∏.\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è "
        f"–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞ –∏ –¥—Ä—É–≥–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.\n\n"
        f"–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel",
        parse_mode="Markdown"
    )
    
    return ConversationHandler.END


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/task - –Ω–∞—á–∞—Ç—å —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "/profile - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞\n"
        "/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è\n\n"
        "–ö—É—Ä—Å '–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ' —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 9 –≥–ª–∞–≤. "
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥–ª–∞–≤—É, —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."
    )
    
    return ConversationHandler.END


async def task_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /task
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≥–ª–∞–≤
    reply_markup = get_chapters_keyboard()
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É –∫—É—Ä—Å–∞:",
        reply_markup=reply_markup
    )
    
    return SELECTING_CHAPTER


async def select_chapter(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–ª–∞–≤—ã
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥–ª–∞–≤—É (–∫–æ—Ä–æ—Ç–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)
    chapter_id = query.data.replace(PREFIX_CHAPTER, "")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã –∏–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ "ch1" –ø–æ–ª—É—á–∞–µ–º 1)
    try:
        chapter_number = int(chapter_id.replace("ch", ""))
        chapter = CHAPTERS[chapter_number - 1]  # -1 —Ç–∞–∫ –∫–∞–∫ –Ω—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
    except (ValueError, IndexError):
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        chapter = chapter_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["chapter"] = chapter
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
    reply_markup = get_task_types_keyboard()
    
    await query.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –≥–ª–∞–≤–∞: {chapter}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:",
        reply_markup=reply_markup
    )
    
    return SELECTING_TASK_TYPE


async def select_task_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏
    task_type = query.data.replace(PREFIX_TASK_TYPE, "")
    task_type_name = TASK_TYPES[task_type]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["task_type"] = task_type
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    reply_markup = get_difficulty_keyboard()
    
    await query.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –≥–ª–∞–≤–∞: {context.user_data['chapter']}\n"
        f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task_type_name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:",
        reply_markup=reply_markup
    )
    
    return SELECTING_DIFFICULTY


async def select_difficulty(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    difficulty = query.data.replace(PREFIX_DIFFICULTY, "")
    difficulty_name = DIFFICULTY_LEVELS[difficulty]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["difficulty"] = difficulty
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    chapter = context.user_data["chapter"]
    task_type = context.user_data["task_type"]
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
    await query.edit_message_text(
        f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∑–∞–¥–∞—á—É –¥–ª—è –≤–∞—Å...\n\n"
        f"–ì–ª–∞–≤–∞: {chapter}\n"
        f"–¢–∏–ø –∑–∞–¥–∞—á–∏: {TASK_TYPES[task_type]}\n"
        f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty_name}"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–Ω—è—Ç–∏—è –ø–æ –≥–ª–∞–≤–µ
        concepts = neo4j_client.get_concepts_by_chapter(chapter)
        
        if not concepts:
            await query.edit_message_text(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –≥–ª–∞–≤—ã '{chapter}' –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–Ω—è—Ç–∏–π –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≥–ª–∞–≤—É."
            )
            return ConversationHandler.END
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–Ω—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
        import random
        concept = random.choice(concepts)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è
        related_concepts = neo4j_client.get_related_concepts(concept.get('name', ''), chapter)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
        task = await openrouter_client.generate_task(
            concept, 
            related_concepts, 
            task_type, 
            difficulty
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = update.effective_user
        conversation = get_conversation(user.id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
        conversation.set_current_task(task)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–¥–∞—á–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏
        if (task_type == "multiple_choice" or task_type == "template") and "options" in task:
            options = task["options"]
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            random.shuffle(options)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—É–∫–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è API –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä–æ–≤—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for i, option in enumerate(options):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –±—É–∫–≤—É
                letter_label = chr(65 + i)  # A, B, C, D...
                option['label'] = letter_label  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –±—É–∫–≤–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –¥–ª—è API
                option['display_label'] = str(i + 1)  # –¶–∏—Ñ—Ä–æ–≤–∞—è –º–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (1, 2, 3...)
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        conversation.set_current_task(task)
        save_conversation(conversation)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        task_message = conversation.format_task_for_display()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
        if (task_type == "multiple_choice" or task_type == "template") and "options" in task:
            options = task["options"]
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
            keyboard = []
            row = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            for i, option in enumerate(options):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –±—É–∫–≤—É
                letter_label = chr(65 + i)  # A, B, C, D...
                option['label'] = letter_label  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –±—É–∫–≤–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –¥–ª—è API
                option['display_label'] = str(i + 1)  # –¶–∏—Ñ—Ä–æ–≤–∞—è –º–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (1, 2, 3...)
                display_label = option['display_label']
                row.append(InlineKeyboardButton(display_label, callback_data=f"answer:{letter_label}"))
                
                # –ü–æ–º–µ—â–∞–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                if len(row) == 3 or i == len(options) - 1:
                    keyboard.append(row.copy())
                    row = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard.append([
                InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip"),
                InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
            await query.message.reply_text(
                task_message,
                parse_mode="Markdown"
            )
            
            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:",
                reply_markup=reply_markup
            )
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = [
                [
                    InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip"),
                    InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await query.message.reply_text(
                task_message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        
        return WAITING_FOR_ANSWER
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        await query.edit_message_text(
            MESSAGES['error']
        )
        return ConversationHandler.END


async def process_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞—á—É
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = update.effective_user
    conversation = get_conversation(user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
    if not conversation.current_task:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /task, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É."
        )
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    student_answer = update.message.text
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    conversation.add_message('student', student_answer, update.message.message_id)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        task = conversation.current_task
        concept_name = task.get("concept_name", "")
        task_type = task.get("task_type", "template")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if not hasattr(context.user_data, "correct_answers_count"):
            context.user_data["correct_answers_count"] = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–Ω—è—Ç–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        concept = neo4j_client.get_concept_by_name(concept_name, context.user_data["chapter"])
        
        if not concept:
            await update.message.reply_text(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–Ω—è—Ç–∏–µ '{concept_name}' –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."
            )
            return ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        check_result = await openrouter_client.check_answer(
            task, 
            student_answer, 
            concept
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
        is_correct = check_result.get("is_correct", False)
        feedback = check_result.get("feedback", "")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        keyboard = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Å—á–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if is_correct:
            context.user_data["correct_answers_count"] = context.user_data.get("correct_answers_count", 0) + 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥
            if context.user_data.get("correct_answers_count", 0) >= 3:
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                keyboard.append([
                    InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –≥–ª–∞–≤—É", callback_data="next_step:change_chapter")
                ])
                keyboard.append([
                    InlineKeyboardButton("–ü–æ–≤—ã—Å–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å", callback_data="next_step:increase_difficulty")
                ])
                keyboard.append([
                    InlineKeyboardButton(
                        "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É" if task_type == "template" else "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É", 
                        callback_data="next_step:change_task_type"
                    )
                ])
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                context.user_data["correct_answers_count"] = 0
        else:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
            context.user_data["correct_answers_count"] = 0
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            keyboard.append([
                InlineKeyboardButton("–û–±—Å—É–¥–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="next_step:discuss")
            ])
            keyboard.append([
                InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="next_step:try_again")
            ])
            keyboard.append([
                InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="next_step:skip")
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.append([InlineKeyboardButton("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="feedback:new_task")])
        keyboard.append([InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="feedback:end")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        check_result['task_type'] = task_type
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–¥–∞—á–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        if not is_correct and "hints" in task:
            check_result['hints'] = task.get("hints", [])
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ TelegramBot –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
        from ai_tutor.bot.telegram_bot import TelegramBot
        feedback_message = TelegramBot.format_feedback_message(None, check_result)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        conversation.add_message('bot', feedback_message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥
        conversation.clear_current_task()
        conversation.current_state = "feedback"
        save_conversation(conversation)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await update.message.reply_text(
            feedback_message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞
        student = neo4j_client.get_student_by_telegram_id(user.id)
        if student:
            student.tasks_completed += 1
            if is_correct:
                student.correct_answers += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            neo4j_client.save_student_answer(
                student.telegram_id,
                task,
                student_answer,
                is_correct,
                feedback
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
            neo4j_client.update_student(student)
        
        return SHOW_FEEDBACK
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        await update.message.reply_text(
            MESSAGES['error']
        )
        return ConversationHandler.END


async def skip_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = update.effective_user
    conversation = get_conversation(user.id)
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
    conversation.clear_current_task()
    save_conversation(conversation)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        "–ó–∞–¥–∞—á–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /task, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É."
    )
    
    return ConversationHandler.END


async def new_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≥–ª–∞–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if "chapter" not in context.user_data:
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –≥–ª–∞–≤—ã
        await query.edit_message_text("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≥–ª–∞–≤
        reply_markup = get_chapters_keyboard()
        
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É –∫—É—Ä—Å–∞:",
            reply_markup=reply_markup
        )
        
        return SELECTING_CHAPTER
    
    # –ï—Å–ª–∏ –≥–ª–∞–≤–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    chapter = context.user_data["chapter"]
    task_type = context.user_data.get("task_type", "template")
    difficulty = context.user_data.get("difficulty", "standard")
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
    await query.edit_message_text(
        f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –≤–∞—Å...\n\n"
        f"–ì–ª–∞–≤–∞: {chapter}\n"
        f"–¢–∏–ø –∑–∞–¥–∞—á–∏: {TASK_TYPES[task_type]}\n"
        f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {DIFFICULTY_LEVELS[difficulty]}"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–Ω—è—Ç–∏—è –ø–æ –≥–ª–∞–≤–µ
        concepts = neo4j_client.get_concepts_by_chapter(chapter)
        
        if not concepts:
            await query.edit_message_text(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –≥–ª–∞–≤—ã '{chapter}' –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–Ω—è—Ç–∏–π –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≥–ª–∞–≤—É."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≥–ª–∞–≤
            reply_markup = get_chapters_keyboard()
            
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É –∫—É—Ä—Å–∞:",
                reply_markup=reply_markup
            )
            
            return SELECTING_CHAPTER
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–Ω—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
        import random
        concept = random.choice(concepts)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è
        related_concepts = neo4j_client.get_related_concepts(concept.get('name', ''), chapter)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
        task = await openrouter_client.generate_task(
            concept, 
            related_concepts, 
            task_type, 
            difficulty
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = update.effective_user
        conversation = get_conversation(user.id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
        conversation.set_current_task(task)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–¥–∞—á–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏
        if (task_type == "multiple_choice" or task_type == "template") and "options" in task:
            options = task["options"]
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            random.shuffle(options)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—É–∫–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è API –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä–æ–≤—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for i, option in enumerate(options):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –±—É–∫–≤—É
                letter_label = chr(65 + i)  # A, B, C, D...
                option['label'] = letter_label  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –±—É–∫–≤–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –¥–ª—è API
                option['display_label'] = str(i + 1)  # –¶–∏—Ñ—Ä–æ–≤–∞—è –º–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (1, 2, 3...)
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        conversation.set_current_task(task)
        save_conversation(conversation)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        task_message = conversation.format_task_for_display()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
        if (task_type == "multiple_choice" or task_type == "template") and "options" in task:
            options = task["options"]
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
            keyboard = []
            row = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            for i, option in enumerate(options):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –±—É–∫–≤—É
                letter_label = chr(65 + i)  # A, B, C, D...
                option['label'] = letter_label  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –±—É–∫–≤–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –¥–ª—è API
                option['display_label'] = str(i + 1)  # –¶–∏—Ñ—Ä–æ–≤–∞—è –º–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (1, 2, 3...)
                display_label = option['display_label']
                row.append(InlineKeyboardButton(display_label, callback_data=f"answer:{letter_label}"))
                
                # –ü–æ–º–µ—â–∞–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                if len(row) == 3 or i == len(options) - 1:
                    keyboard.append(row.copy())
                    row = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard.append([
                InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip"),
                InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
            await query.message.reply_text(
                task_message,
                parse_mode="Markdown"
            )
            
            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:",
                reply_markup=reply_markup
            )
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = [
                [
                    InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip"),
                    InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await query.message.reply_text(
                task_message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        
        return WAITING_FOR_ANSWER
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        await query.edit_message_text(
            MESSAGES['error']
        )
        return ConversationHandler.END


async def end_session(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        MESSAGES['session_ended']
    )
    
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = update.effective_user
    conversation = get_conversation(user.id)
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
    conversation.clear_current_task()
    save_conversation(conversation)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        "–û—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /task, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É."
    )
    
    return ConversationHandler.END


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    await update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )


async def handle_next_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞—á—É
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data
    action = query.data.split(":")[1]
    
    user = update.effective_user
    conversation = get_conversation(user.id)
    
    try:
        if action == "discuss":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
            last_task = conversation.get_last_task()
            concept_name = last_task.get("concept_name", "") if last_task else ""
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–Ω—è—Ç–∏–∏
            intro_text = "–î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –∑–∞–¥–∞—á—É. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n\n"
            
            # –ï—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ –ø–æ–Ω—è—Ç–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
            if concept_name:
                intro_text += f"–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ –ø–æ–Ω—è—Ç–∏–∏: *{concept_name}*\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–Ω—è—Ç–∏—è, –µ—Å–ª–∏ –º–æ–∂–µ–º –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å
                try:
                    chapter = context.user_data.get("chapter", "")
                    concept = neo4j_client.get_concept_by_name(concept_name, chapter)
                    if concept and concept.get("definition"):
                        intro_text += f"\n–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: _{concept.get('definition')}_\n"
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–Ω—è—Ç–∏—è {concept_name}: {e}")
            
            intro_text += "\n–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø–æ–Ω—è—Ç–∏–∏ –∏–ª–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏."
            
            await query.edit_message_text(
                intro_text,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="feedback:new_task")],
                    [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ", callback_data="feedback:end")]
                ])
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
            conversation.current_state = "discussion"
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if not conversation.current_task and last_task:
                conversation.current_task = last_task
            save_conversation(conversation)
            
            return SHOW_FEEDBACK
            
        elif action == "try_again":
            # –î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            last_task = conversation.get_last_task()
            if not last_task:
                await query.edit_message_text(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –Ω–æ–≤—É—é.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="feedback:new_task")],
                        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="feedback:end")]
                    ])
                )
                return SHOW_FEEDBACK
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
            conversation.current_task = last_task
            conversation.current_state = "waiting_answer"
            save_conversation(conversation)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            task_message = conversation.format_task_for_display()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            if last_task.get("task_type") == "template" and "options" in last_task:
                options = last_task["options"]
                options_text = "\n\n*–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:*\n"
                for option in options:
                    options_text += f"\n{option['label']}. {option['text']}"
                task_message += options_text
            
            await query.edit_message_text(
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n\n{task_message}",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="feedback:end")]
                ])
            )
            
            return WAITING_FOR_ANSWER
            
        elif action == "skip":
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
            await query.edit_message_text(
                "–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∑–∞–¥–∞—á—É. –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="feedback:new_task")],
                    [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="feedback:end")]
                ])
            )
            return SHOW_FEEDBACK
            
        elif action == "change_chapter":
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–º–µ–Ω–∏—Ç—å –≥–ª–∞–≤—É
            reply_markup = get_chapters_keyboard()
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≥–ª–∞–≤—É:",
                reply_markup=reply_markup
            )
            return SELECTING_CHAPTER
            
        elif action == "increase_difficulty":
            # –ü–æ–≤—ã—à–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            context.user_data["difficulty"] = "advanced"
            await query.edit_message_text(
                "–°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∞ –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è. –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="feedback:new_task")],
                    [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="feedback:end")]
                ])
            )
            return SHOW_FEEDBACK
            
        elif action == "change_task_type":
            # –ú–µ–Ω—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
            current_type = context.user_data.get("task_type", "template")
            new_type = "creative" if current_type == "template" else "template"
            context.user_data["task_type"] = new_type
            
            type_name = "—Ç–≤–æ—Ä—á–µ—Å–∫—É—é" if new_type == "creative" else "—à–∞–±–ª–æ–Ω–Ω—É—é"
            await query.edit_message_text(
                f"–¢–∏–ø –∑–∞–¥–∞—á –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {type_name}. –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="feedback:new_task")],
                    [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="feedback:end")]
                ])
            )
            return SHOW_FEEDBACK
            
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            await query.edit_message_text(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="feedback:new_task")],
                    [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="feedback:end")]
                ])
            )
            return SHOW_FEEDBACK
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ next_step: {e}")
        await query.edit_message_text(
            MESSAGES['error'],
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="feedback:end")]
            ])
        )
        return ConversationHandler.END


async def handle_answer_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ñ–æ—Ä–º–∞—Ç "answer:A")
    answer_letter = query.data.replace("answer:", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = update.effective_user
    conversation = get_conversation(user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
    if not conversation.current_task:
        await query.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /task, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É."
        )
        return ConversationHandler.END
    
    # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ü–∏—é —Å —ç—Ç–æ–π –±—É–∫–≤–æ–π
    selected_option = None
    for option in conversation.current_task.get("options", []):
        if option.get("label") == answer_letter:
            selected_option = option
            break
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if selected_option:
        display_answer = f"{answer_letter}. {selected_option.get('text', '')}"
        student_answer = answer_letter
    else:
        display_answer = f"–í–∞—Ä–∏–∞–Ω—Ç {answer_letter}"
        student_answer = answer_letter
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    conversation.add_message('student', display_answer, query.message.message_id)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        task = conversation.current_task
        concept_name = task.get("concept_name", "")
        task_type = task.get("task_type", "template")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —à–∞–±–ª–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if not hasattr(context.user_data, "correct_answers_count"):
            context.user_data["correct_answers_count"] = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–Ω—è—Ç–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        concept = neo4j_client.get_concept_by_name(concept_name, context.user_data["chapter"])
        
        if not concept:
            await query.edit_message_text(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–Ω—è—Ç–∏–µ '{concept_name}' –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."
            )
            return ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        check_result = await openrouter_client.check_answer(
            task, 
            student_answer,  # –ü–µ—Ä–µ–¥–∞–µ–º –±—É–∫–≤–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            concept
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
        is_correct = check_result.get("is_correct", False)
        feedback = check_result.get("feedback", "")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        keyboard = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Å—á–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if is_correct:
            context.user_data["correct_answers_count"] = context.user_data.get("correct_answers_count", 0) + 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥
            if context.user_data.get("correct_answers_count", 0) >= 3:
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                keyboard.append([
                    InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –≥–ª–∞–≤—É", callback_data="next_step:change_chapter")
                ])
                keyboard.append([
                    InlineKeyboardButton("–ü–æ–≤—ã—Å–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å", callback_data="next_step:increase_difficulty")
                ])
                keyboard.append([
                    InlineKeyboardButton(
                        "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É" if task_type == "template" else "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É", 
                        callback_data="next_step:change_task_type"
                    )
                ])
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                context.user_data["correct_answers_count"] = 0
        else:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
            context.user_data["correct_answers_count"] = 0
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            keyboard.append([
                InlineKeyboardButton("–û–±—Å—É–¥–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="next_step:discuss")
            ])
            keyboard.append([
                InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="next_step:try_again")
            ])
            keyboard.append([
                InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="next_step:skip")
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.append([InlineKeyboardButton("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="feedback:new_task")])
        keyboard.append([InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="feedback:end")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        check_result['task_type'] = task_type
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–¥–∞—á–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        if not is_correct and "hints" in task:
            check_result['hints'] = task.get("hints", [])
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ TelegramBot –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
        from ai_tutor.bot.telegram_bot import TelegramBot
        feedback_message = TelegramBot.format_feedback_message(None, check_result)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        conversation.add_message('bot', feedback_message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥
        conversation.clear_current_task()
        conversation.current_state = "feedback"
        save_conversation(conversation)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await query.edit_message_text(
            feedback_message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞
        student = neo4j_client.get_student_by_telegram_id(user.id)
        if student:
            student.tasks_completed += 1
            if is_correct:
                student.correct_answers += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            neo4j_client.save_student_answer(
                student.telegram_id,
                task,
                display_answer,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                is_correct,
                feedback
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
            neo4j_client.update_student(student)
        
        return SHOW_FEEDBACK
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–Ω–æ–ø–∫–µ: {e}")
        await query.message.reply_text(
            MESSAGES['error']
        )
        return ConversationHandler.END
