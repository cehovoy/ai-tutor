"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞–º–∏ –≤ Telegram-–±–æ—Ç–µ
"""
from typing import Dict, List, Any, Optional
import logging
from datetime import datetime

from ai_tutor.config.constants import MAX_HISTORY_MESSAGES
from ai_tutor.database.models import Student, Task

logger = logging.getLogger(__name__)


class Conversation:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º –º–µ–∂–¥—É —Å—Ç—É–¥–µ–Ω—Ç–æ–º –∏ –±–æ—Ç–æ–º
    """
    
    def __init__(self, student_id: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            student_id: ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ Telegram
        """
        self.student_id = student_id
        self.history: List[Dict[str, Any]] = []
        self.current_task: Optional[Dict[str, Any]] = None
        self.current_state: str = "idle"
        self.last_message_time: datetime = datetime.now()
    
    def add_message(self, role: str, text: str, message_id: Optional[int] = None) -> None:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            role: –†–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è ('student' –∏–ª–∏ 'bot')
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        """
        message = {
            "role": role,
            "text": text,
            "timestamp": datetime.now().isoformat(),
            "message_id": message_id
        }
        
        self.history.append(message)
        self.last_message_time = datetime.now()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.history) > MAX_HISTORY_MESSAGES:
            self.history = self.history[-MAX_HISTORY_MESSAGES:]
    
    def set_current_task(self, task: Dict[str, Any]) -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
        
        Args:
            task: –ó–∞–¥–∞—á–∞
        """
        self.current_task = task
        self.current_state = "waiting_for_answer"
    
    def clear_current_task(self) -> None:
        """
        –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
        """
        self.current_task = None
        self.current_state = "idle"
    
    def get_last_task(self) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        
        Returns:
            –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç
        """
        if self.current_task:
            return self.current_task
            
        # –ò—â–µ–º –∑–∞–¥–∞—á—É –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        for message in reversed(self.history):
            if message.get("role") == "bot" and "task" in message:
                return message["task"]
        
        return None
    
    def format_task_for_display(self) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
        """
        if not self.current_task:
            return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏."
        
        task_type = self.current_task.get("task_type", "")
        difficulty = self.current_task.get("difficulty", "")
        concept = self.current_task.get("concept_name", "")
        question = self.current_task.get("question", "")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ —É–¥–æ–±–Ω—ã–π –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç
        task_type_display = {
            "template": "–ó–∞–¥–∞—á–∞ —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞",
            "multiple_choice": "–ó–∞–¥–∞—á–∞ —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞",
            "creative": "–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞"
        }.get(task_type, task_type)
        
        difficulty_display = {
            "standard": "–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å", 
            "basic": "–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å",
            "advanced": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å"
        }.get(difficulty, difficulty)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
        formatted_text = f"üìö *–ó–∞–¥–∞—á–∞ –ø–æ —Ç–µ–º–µ: {concept}*\n\n"
        formatted_text += f"{question}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞
        if "options" in self.current_task:
            formatted_text += "\n*–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:*\n"
            for option in self.current_task["options"]:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º display_label (—Ü–∏—Ñ—Ä–∞) –≤–º–µ—Å—Ç–æ label (–±—É–∫–≤–∞)
                display_label = option.get('display_label', option.get('label', ''))
                formatted_text += f"\n*{display_label}.* {option['text']}"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–µ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        formatted_text += f"\n\n_–¢–∏–ø: {task_type_display} | –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty_display}_"
        
        return formatted_text
    
    def to_dict(self) -> Dict[str, Any]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–∏–∞–ª–æ–≥–∞
        """
        return {
            "student_id": self.student_id,
            "history": self.history,
            "current_task": self.current_task,
            "current_state": self.current_state,
            "last_message_time": self.last_message_time.isoformat()
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Conversation':
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–∏–∞–ª–æ–≥–∞
            
        Returns:
            –û–±—ä–µ–∫—Ç Conversation
        """
        conversation = cls(data.get("student_id", 0))
        conversation.history = data.get("history", [])
        conversation.current_task = data.get("current_task")
        conversation.current_state = data.get("current_state", "idle")
        
        last_message_time_str = data.get("last_message_time")
        if last_message_time_str:
            try:
                conversation.last_message_time = datetime.fromisoformat(last_message_time_str)
            except ValueError:
                pass
        
        return conversation


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏
active_conversations: Dict[int, Conversation] = {}


def get_conversation(student_id: int) -> Conversation:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    
    Args:
        student_id: ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ Telegram
        
    Returns:
        –û–±—ä–µ–∫—Ç Conversation
    """
    if student_id not in active_conversations:
        active_conversations[student_id] = Conversation(student_id)
    
    return active_conversations[student_id]


def save_conversation(conversation: Conversation) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    
    Args:
        conversation: –û–±—ä–µ–∫—Ç Conversation
    """
    active_conversations[conversation.student_id] = conversation
