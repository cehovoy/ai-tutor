"""
Telegram-–±–æ—Ç –¥–ª—è –ò–ò-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
"""
import logging
import asyncio
import traceback
from typing import Dict, Any, Optional, Union, List

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ApplicationBuilder
from telegram.ext import ContextTypes, ConversationHandler, filters

from ai_tutor.config.settings import TELEGRAM_TOKEN, CHAPTERS, TASK_TYPES, DIFFICULTY_LEVELS
from ai_tutor.agents.crew import TutorCrew
from ai_tutor.api.openrouter import OpenRouterClient
from ai_tutor.database.neo4j_client import Neo4jClient
from ai_tutor.agents.assistant import CourseAssistant
from ai_tutor.agents.tutor_assistant import TutorAssistant
from ai_tutor.bot.handlers import (
    start_command, help_command, task_command, cancel, unknown_command,
    select_chapter, select_task_type, select_difficulty, process_answer,
    skip_task, new_task, end_session, handle_next_step
)
from ai_tutor.bot.conversation import get_conversation, save_conversation

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECTING_CHAPTER, SELECTING_TASK_TYPE, SELECTING_DIFFICULTY, WAITING_FOR_ANSWER, SHOW_FEEDBACK, DISCUSSION, WAITING_FOR_ASK_CHAPTER = range(7)

# –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è callback-–¥–∞–Ω–Ω—ã—Ö
PREFIX_CHAPTER = "chapter:"
PREFIX_TASK_TYPE = "task_type:"
PREFIX_DIFFICULTY = "difficulty:"

logger = logging.getLogger(__name__)


class TelegramBot:
    """
    Telegram-–±–æ—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ò–ò-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º
    """
    
    def __init__(self, token: str = TELEGRAM_TOKEN):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
        
        Args:
            token: –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
        """
        self.token = token
        
        # –õ–æ–≥–≥–µ—Ä
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.neo4j_client = Neo4jClient()
        self.openrouter_client = OpenRouterClient()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–º–æ—â–Ω–∏–∫–∞
        self.course_assistant = CourseAssistant(self.neo4j_client, self.openrouter_client)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞—á
        self.tutor_assistant = TutorAssistant(self.neo4j_client, self.openrouter_client)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        self.application = ApplicationBuilder().token(token).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._add_handlers()
    
    def _add_handlers(self) -> None:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /start, —á—Ç–æ–±—ã –æ–Ω –∏–º–µ–ª –Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        self.application.add_handler(CommandHandler("start", self.start))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /help 
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
        conv_handler = self.create_conversation_handler()
        
        self.application.add_handler(conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        self.application.add_handler(MessageHandler(filters.COMMAND, self.unknown_command))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            
        Returns:
            –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        """
        user = update.effective_user
        await update.message.reply_text(
            f"üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Tutor!*\n\n"
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –®–∫–æ–ª—ã –°–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ú—ã—à–ª–µ–Ω–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–º–æ—á—å –≤–∞–º –æ—Å–≤–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ.\n\n"
            f"üß† *–û —Å–µ—Ä–≤–∏—Å–µ:*\n"
            f"AI Tutor –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã, –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –¥–µ–ª–∞—è –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º.\n\n"
            f"üìö *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è:*\n"
            f"1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∫—É—Ä—Å–∞ '–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ'\n"
            f"2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏ (—à–∞–±–ª–æ–Ω–Ω–∞—è –∏–ª–∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è)\n"
            f"3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n"
            f"4. –†–µ—à–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n\n"
            f"‚≠ê *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–∞–∂–µ–Ω:*\n"
            f"–ü–æ—Å–ª–µ 5 –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å, —Å–º–µ–Ω–∏—Ç—å —Ç–∏–ø –∑–∞–¥–∞—á –∏–ª–∏ –∏–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é –≥–ª–∞–≤—É.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /task, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ!",
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é
        await self.help_command(update, context)
        
        return ConversationHandler.END
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            
        Returns:
            –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        """
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/task - –Ω–∞—á–∞—Ç—å —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥\n\n"
            "–ö—É—Ä—Å '–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ' —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 9 –≥–ª–∞–≤. "
            "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥–ª–∞–≤—É, —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."
        )
        
        return ConversationHandler.END
    
    def create_conversation_handler(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞
        
        Returns:
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
        """
        from ai_tutor.bot.handlers import (
            task_command, select_chapter, select_difficulty, select_task_type,
            process_answer, skip_task, end_session, 
            new_task, handle_next_step, handle_answer_button, cancel
        )
        
        return ConversationHandler(
            entry_points=[
                CommandHandler("task", task_command)
            ],
            states={
                SELECTING_CHAPTER: [
                    CallbackQueryHandler(select_chapter, pattern=f"^{PREFIX_CHAPTER}")
                ],
                SELECTING_TASK_TYPE: [
                    CallbackQueryHandler(select_task_type, pattern=f"^{PREFIX_TASK_TYPE}")
                ],
                SELECTING_DIFFICULTY: [
                    CallbackQueryHandler(select_difficulty, pattern=f"^{PREFIX_DIFFICULTY}")
                ],
                WAITING_FOR_ANSWER: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, process_answer),
                    CallbackQueryHandler(handle_answer_button, pattern="^answer:"),
                    CallbackQueryHandler(skip_task, pattern="^skip"),
                    CallbackQueryHandler(end_session, pattern="^end")
                ],
                SHOW_FEEDBACK: [
                    CallbackQueryHandler(new_task, pattern="^feedback:new_task"),
                    CallbackQueryHandler(end_session, pattern="^feedback:end"),
                    CallbackQueryHandler(handle_next_step, pattern="^next_step:"),
                    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
                    MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, context: self.discussion_handler(update, context, SHOW_FEEDBACK))
                ]
            },
            fallbacks=[CommandHandler("cancel", cancel)],
            name="conversation_handler",
            persistent=False
        )
    
    async def discussion_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE, return_state: int) -> int:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∂–∏–º–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞—á–∏, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            return_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è
            
        Returns:
            –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        """
        user = update.effective_user
        conversation = get_conversation(user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        if conversation.current_state != "discussion":
            return return_state
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        question = update.message.text
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        conversation.add_message('student', question, update.message.message_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–µ
        last_task = conversation.get_last_task()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≥–ª–∞–≤—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chapter_title = context.user_data.get("chapter", "")
        concept_name = last_task.get("concept_name", "") if last_task else ""
        task_question = last_task.get("question", "") if last_task else ""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." —Å—Ç–∞—Ç—É—Å
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        try:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if not last_task or not concept_name:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±—Å—É–¥–∏—Ç—å –∑–∞–¥–∞—á—É –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø–æ–Ω—è—Ç–∏—è")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CourseAssistant –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º CourseAssistant, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∫—É—Ä—Å–∞
                    answer = await self.course_assistant.answer_question(question, chapter_title)
                    logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ CourseAssistant")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ CourseAssistant: {str(e)}")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–æ–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    answer = (
                        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ –∫–∞–∫–æ–π –∑–∞–¥–∞—á–µ –∏–ª–∏ –ø–æ–Ω—è—Ç–∏–∏ –∏–¥–µ—Ç —Ä–µ—á—å. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, —É–∫–∞–∑–∞–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–Ω—è—Ç–∏–µ, –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É."
                    )
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–ª–∞–≤–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    if chapter_title:
                        try:
                            chapter_info = self.neo4j_client.get_chapter_info(chapter_title)
                            if chapter_info and 'main_ideas' in chapter_info:
                                answer += f"\n\n–ú—ã –æ–±—Å—É–∂–¥–∞–µ–º –≥–ª–∞–≤—É '{chapter_title}', –≥–¥–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è: {chapter_info['main_ideas']}"
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–ª–∞–≤–µ: {str(e)}")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–≥–æ —Ç—É—Ç–æ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
                answer = await self.tutor_assistant.discuss_task(
                    student_question=question,
                    concept_name=concept_name,
                    task_question=task_question,
                    chapter_title=chapter_title
                )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            self.tutor_assistant.log_discussion(
                student_id=str(user.id),
                concept_name=concept_name,
                question=question,
                answer=answer,
                chapter_title=chapter_title
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø–æ–º–æ—â–Ω–∏–∫—É: {str(e)}")
            answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        conversation.add_message('bot', answer)
        save_conversation(conversation)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        await update.message.reply_text(
            answer,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="feedback:new_task")],
                [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ", callback_data="feedback:end")]
            ]),
            parse_mode="Markdown"
        )
        
        return return_state
    
    async def unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
    
    async def generate_task(self, student_id: str, chapter_title: str, 
                         task_type: str, difficulty: str) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á–∏
        
        Args:
            student_id: ID —Å—Ç—É–¥–µ–Ω—Ç–∞
            chapter_title: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã
            task_type: –¢–∏–ø –∑–∞–¥–∞—á–∏
            difficulty: –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
        """
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏: student_id={student_id}, –≥–ª–∞–≤–∞={chapter_title}, —Ç–∏–ø={task_type}, —Å–ª–æ–∂–Ω–æ—Å—Ç—å={difficulty}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
            loop = asyncio.get_event_loop()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
            logger.info("–í—ã–∑—ã–≤–∞–µ–º TutorCrew.full_tutor_process —á–µ—Ä–µ–∑ run_in_executor")
            
            result = await loop.run_in_executor(
                None,
                lambda: self.tutor_crew.full_tutor_process(
                    student_id=student_id,
                    chapter_title=chapter_title,
                    task_type=task_type,
                    difficulty=difficulty
                )
            )
            
            logger.info("–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ TutorCrew.full_tutor_process")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            if "error" in result.get("task", {}):
                error_message = result["task"]["error"]
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏: {error_message}")
            else:
                logger.info("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
                
            return result
        except Exception as e:
            error_message = str(e)
            stack_trace = traceback.format_exc()
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏: {error_message}\n{stack_trace}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
            return {
                "task": {
                    "error": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏: {error_message}",
                    "concept_name": "–û—à–∏–±–∫–∞",
                    "task_type": task_type,
                    "difficulty": difficulty
                },
                "metadata": {
                    "student_id": student_id,
                    "chapter_title": chapter_title,
                    "task_type": task_type,
                    "difficulty": difficulty
                }
            }
    
    async def check_answer(self, student_id: str, chapter_title: str, 
                        task: Dict[str, Any], student_answer: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
        
        Args:
            student_id: ID —Å—Ç—É–¥–µ–Ω—Ç–∞
            chapter_title: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã
            task: –ó–∞–¥–∞—á–∞
            student_answer: –û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        try:
            loop = asyncio.get_event_loop()
            return await loop.run_in_executor(
                None,
                lambda: self.tutor_crew.check_answer(
                    student_id=student_id,
                    chapter_title=chapter_title,
                    task=task,
                    student_answer=student_answer
                )
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            return {
                "is_correct": False,
                "explanation": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}",
                "recommendations": ["–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."]
            }
    
    def format_task_message(self, task: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞—á–µ–π
        
        Args:
            task: –ó–∞–¥–∞—á–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
        """
        message = f"üìö *–ó–∞–¥–∞—á–∞ –ø–æ —Ç–µ–º–µ: {task['concept_name']}*\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—è –µ–≥–æ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        message += f"{task['question']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
        if task["task_type"] == "multiple_choice":
            message += "*–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:*\n\n"
            # –ù—É–º–µ—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –±—É–∫–≤–∞–º–∏ (A, B, C, D)
            for i, option in enumerate(task["options"], 1):
                letter = chr(64 + i)  # 65 - –∫–æ–¥ ASCII –¥–ª—è 'A'
                message += f"*{letter}.* {option['text']}\n"
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—É–∫–≤–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –≤ –æ–ø—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                option['label'] = letter
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
        if task["task_type"] == "creative" and "criteria" in task:
            message += "\n*–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏:*\n"
            for criterion in task["criteria"]:
                message += f"‚Ä¢ {criterion}\n"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞, —Ç–æ–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º
            if "example_answer" in task and task["example_answer"]:
                message += "\n*–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:*\n"
                message += f"{task['example_answer']}\n"
        
        return message
    
    def create_options_keyboard(self, task: Dict[str, Any]) -> Optional[InlineKeyboardMarkup]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
        
        Args:
            task: –ó–∞–¥–∞—á–∞
            
        Returns:
            –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏–ª–∏ None, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–¥–∞—á–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
        """
        if task["task_type"] != "multiple_choice":
            return None
            
        keyboard = []
        row = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
        for i, option in enumerate(task["options"], 1):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–º–µ—Ä –≤ –±—É–∫–≤—É (1 -> A, 2 -> B, –∏ —Ç.–¥.)
            letter = chr(64 + i)  # 65 - –∫–æ–¥ ASCII –¥–ª—è 'A'
            # Callback data —Ñ–æ—Ä–º–∞—Ç–∞ answer:–±—É–∫–≤–∞
            callback_data = f"answer:{letter}"
            row.append(InlineKeyboardButton(letter, callback_data=callback_data))
            
            # –ü–æ–º–µ—â–∞–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            if len(row) == 3 or i == len(task["options"]):
                keyboard.append(row.copy())
                row = []
                
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π
        keyboard.append([
            InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip"),
            InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end")
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    def format_feedback_message(self, check_result: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            check_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        """
        is_correct = check_result.get('is_correct', False)
        task_type = check_result.get('task_type', 'template')
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
        if is_correct:
            message = "‚úÖ *–û—Ç–ª–∏—á–Ω–æ!* –¢—ã –≤–µ—Ä–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å.\n\n"
        else:
            # –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ "–ù–µ–≤–µ—Ä–Ω–æ"
            message = "ü§î *–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞!* –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤–º–µ—Å—Ç–µ.\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∑—ã–≤ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
        if task_type == "creative":
            # –î–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é–∏—Ä–æ–≤–∞–Ω–∏—è
            feedback = check_result.get('feedback', '')
            message += f"{feedback}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            if not "—Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã" in feedback.lower():
                strengths = check_result.get('strengths', [])
                if strengths:
                    message += "*–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞:*\n"
                    for strength in strengths:
                        message += f"‚Ä¢ {strength}\n"
                    message += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
            if not any(marker in feedback.lower() for marker in ["–¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è", "–ø–æ–¥—É–º–∞–π", "–≤–æ–ø—Ä–æ—Å—ã"]):
                # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
                improvements = check_result.get('improvements', [])
                if improvements:
                    message += "*–î–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:*\n"
                    for improvement in improvements:
                        message += f"‚Ä¢ {improvement}\n"
                    message += "\n"
                
                # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
                reflection_questions = check_result.get('reflection_questions', [])
                if reflection_questions:
                    message += "*–í–æ–ø—Ä–æ—Å—ã –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–∏—è –ø–æ–Ω–∏–º–∞–Ω–∏—è:*\n"
                    for question in reflection_questions:
                        message += f"‚Ä¢ {question}\n"
                    message += "\n"
        else:
            # –î–ª—è —à–∞–±–ª–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            explanation = check_result.get('explanation', '')
            feedback = check_result.get('feedback', '')
            
            if explanation:
                message += f"{explanation}\n\n"
            elif feedback:
                message += f"{feedback}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π)
            if not is_correct:
                message += "*–ü–æ–¥—É–º–∞–π –Ω–∞–¥ —ç—Ç–∏–º:*\n"
                hints = check_result.get('hints', [])
                if hints:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
                    hint = hints[0] if isinstance(hints, list) and hints else "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–Ω—è—Ç–∏—è –∏ –ø–æ–¥—É–º–∞–π –æ –µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö."
                    message += f"‚Ä¢ {hint}\n"
                else:
                    # –ï—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Å–æ–≤–µ—Ç
                    message += "‚Ä¢ –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–Ω—è—Ç–∏—è.\n"
                    message += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if not is_correct:
            message += "\n–ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Å—è! –ö–∞–∂–¥–∞—è –æ—à–∏–±–∫–∞ - —ç—Ç–æ —à–∞–≥ –∫ –ª—É—á—à–µ–º—É –ø–æ–Ω–∏–º–∞–Ω–∏—é. –•–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?"
        else:
            message += "\n–û—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ. –ß—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –≥–æ—Ç–æ–≤ –ø–µ—Ä–µ–π—Ç–∏ –∫ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º –∑–∞–¥–∞—á–∞–º?"
        
        return message
    
    async def run(self) -> None:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        """
        logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–µ—Ç–æ–¥ Application.run_polling()
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–Ω—É—Ç—Ä–∏ —Å–∞–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç HTTPXRequest
        # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤
        
        # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º—ã –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –∞ –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        await self.application.initialize()
        await self.application.start()
        # –ó–¥–µ—Å—å –º—ã –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º application.updater.start_polling()
        # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫ polling –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ –º–µ—Ç–æ–¥–µ main.py
        
    def run_polling(self) -> None:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ poll (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π)
        –î–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        """
        logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π)")
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
        self.application.run_polling(drop_pending_updates=True)
    
    async def stop(self) -> None:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
        """
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram-–±–æ—Ç–∞")
        await self.application.stop()
        await self.application.shutdown()
